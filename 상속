<< 상속(inheritance) >>
 : 기존의 클래스에 기능을 추가하거나 재정의하여 새로운 클래스를 정의하는 것 
   상속을 이용하면 기존에 정의되어 있는 클래스의 모든 필드와 메소드를 물려받아, 새로운 클래스를 생성할 수 있다.
   - 기존에 정의되어 있던 클래스 : 부모 클래스(parent class) 또는 상위 클래스(super class), 기초 클래스(base class)
   - 상속을 통해 새롭게 작성되는 클래스 : 자식 클래스(child class) 또는 하위 클래스(sub class), 파생 클래스(derived class)
   
 - 문법 : 하나의 클래스가 다른 클래스를 상속받을 때, extends 키워드를 사용한다.
          class 자식클래스이름 extend 부모클래스이름 { ... }
          
 - 상속의 특징
  (1) 기존에 작성된 클래스를 재활용할 수 있다.
  (2) 자식 클래스 설계 시 중복되는 멤버를 미리 부모 클래스에 작성해 놓으면, 자식 클래스에서는 해당 멤버를 작성하지 않아도 된다.
  (3) 부모 클래스는 자식 클래스에 포함된 것으로 볼 수 있다. 따라서 부모 클래스에 새로운 필드를 하나 추가하면, 자식 클래스에도 자동으로 해당 필드가 추가된 것처럼 동작한다.
      자식 클래스에는 부모 클래스의 필드와 메소드만이 상속되며, 생성자와 초기화 블록은 상속되지 않는다.
      또한, 부모 클래스의 접근 제어가 private이나 default로 설정된 멤버는 자식 클래스에서 상속받지만 접근할 수는 없습니다.

 - super 키워드 : 부모 클래스로부터 상속받은 필드나 메소드를 자식 클래스에서 참조하는 데 사용하는 참조 변수
                  인스턴스 변수의 이름과 지역 변수의 이름이 같을 경우 인스턴스 변수 앞에 this 키워드를 사용하여 구분한다.
                  이와 마찬가지로 부모 클래스의 멤버와 자식 클래스의 멤버 이름이 같을 경우 super 키워드를 사용하여 구별한다.
                  super 참조 변수를 사용하여 부모 클래스의 멤버에 접근할 수 있다. 단, this와 마찬가지로 부모의 data가 private 멤버라면 접근이 불가능하다.
                  
 - 메소드 오버라이딩(method overriding) : 상속 관계에 있는 부모 클래스에서 이미 정의된 메소드를 자식 클래스에서 같은 시그니쳐를 갖는 메소드로 다시 정의하는 것  
                                          즉, 상속받은 부모 클래스의 메소드를 재정의하여 사용하는 것.
   (1) 오버라이딩이란 메소드의 동작만을 재정의하는 것이므로, 메소드의 선언부는 기존 메소드와 완전히 같아야 한다.
       하지만 메소드의 반환 타입은 부모 클래스의 반환 타입으로 타입 변환할 수 있는 타입이라면 변경할 수 있습니다.
   (2) 부모 클래스의 메소드보다 접근 제어자를 더 좁은 범위로 변경할 수 없다.
   (3) 부모 클래스의 메소드보다 더 큰 범위의 예외를 선언할 수 없다.

 ** 오버로딩 : 한 클래스 내에서 메소드명은 같고 매개변수가 다른 것 
    오버라이딩 : 자식클래스에서 부모클래스에 있는 메소드와 같은 형태를 갖는 것 **
