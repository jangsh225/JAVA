**제너릭 Generic : 클래스나 메소드에서 사용할 내부 데이터 타입을 컴파일 시에 미리 지정하는 방법
- 예제
  class MyArray<T> {
      T element;
  }
- 호출 예제
MyArray<Integer> myArr = new MyArray<Integer>();

인스턴스 생성 시 타입을 추정할 수 있는 경우에는 타입을 생략할 수 있습니다.
MyArray<Integer> myArr = new MyArray<>();  //Java SE 7부터 가능함. 

<<interface Collection>>
: 다수의 데이터를 쉽고 효과적으로 처리할 수 있는 표준화된 방법을 제공하는 클래스의 집합
즉, 데이터를 저장하는 자료 구조와 데이터를 처리하는 알고리즘을 구조화하여 클래스로 구현(구현체)

- 특징
  1) 데이터 타입 상관 없이 넣을 수 있다.
  2) 사이즈를 입력할 필요가 없다.(용량이 큼)
  3) forEach 문을 활용할 수 있다. 
      for(요소를 저장할 수 있는 변수:콜렉션){}

- Collection 의 종류
1. List 계열
  - 주요 클래스 : ArrayList, Vector, LinkedList
  1) 데이터의 중복을 허용한다. (중복 삽입 가능)
	2) 인덱스 번호가 0부터 자동부여되고 인덱스 번호로 해당하는 데이터에 접근이 가능하다.
	3) Vector는 synchronized 메서드로 구성되어있다 
      --> 멀티스레드 상에서 안전하다. 하지만 처리속도는 느려질 수 있다. 
	   LinkedList 는 (ArrayList와 같은 순차구조 데이터에 비교하여) 빈번한 데이터 삽입, 삭제 시 용이하다. 검색 시에 느려질 수 있다. 
	4) add(데이터), add(인덱스번호, 데이터) : 삽입, 중간삽입
	5) set(인덱스번호, 데이터) : 수정
	6) get(인덱스번호) : 읽기
	7) remove(인덱스번호) : 삭제

2. Set 계열
  - 주요 클래스 : HashSet, TreeSet, LinkedSet
  1) 데이터의 중복을 허용하지 않는다. (중복 데이터 저장 안됨)
	2) 순서가 없는 데이터의 집합, 순서를 유지하지 않고 저장한다. (인덱스 번호가 없음)
	3) add(데이터) : 삽입
	4) remove(데이터) : 삭제
	5) Iterator를 통해서 데이터 추출 가능하다.(forEach 문도 가능)
	6) TreeSet은 순차정렬구조이다.
  
3. Map 계열
  1) 키와 값의 한 쌍으로 이루어지는 데이터의 집합
  2) 순서가 없다. 
